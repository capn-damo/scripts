#!/bin/bash
##
## parse-aliases
##
## Script to parse '.bash_aliases' for output to jgmenu
## Written for Bunsenlabs
## Copyright (C) 2020 damo    <damo@bunsenlabs.org>

##  .bash_aliases needs to be in the following layout:
#       number of hashes aren't too important, as long as the line contains '#[...]#'
#       use single quotes around the command

########################################################################

#       ####[SECTION_TITLE]####
#           alias foo='bar'
#           alias foo2='bar2'
#       ####[FUNCTIONS_TITLE]####
#           func_name(){    # function description to be in submenu
#               foo=bar
#           }

########################################################################

# Run the menu with the command:    'parse-aliases | jgmenu --simple'
#
# If you want the menu formatting and theme to be independant of the default 'jgmenurc',
# create another, and add the path to the command.
# It is recommended to use a monospace font, which helps with a nice layout:
# eg "font = Monospace Regular 10"
#
#   'parse-aliases | jgmenu --simple --config-file=/path/to/aliases.jgmenurc
#
########################################################################

BL_COMMON_LIBDIR="/usr/lib/bunsen/common"   # source jgmenu helper functions

AL="$HOME/.bash_aliases"
SEP="#["                                # the line must contain '#[...]#'
MENU_TITLE="ALIASES in '.bash_aliases'"

nsec=0
declare -a title
declare -a aliases
declare -a arr_line
declare -a arr_funcs
unset section
unset str


if ! . "$BL_COMMON_LIBDIR/bl-include.cfg" 2> /dev/null; then
    echo $"Error: Failed to locate bl-include.cfg in $BL_COMMON_LIBDIR" >&2
    exit 1
fi

while read -r line;do
    [[ ! -n ${line// /} ]] && continue      # if no string then skip line
    if [[ $line == *"${SEP}"* ]];then       # get section titles, add to array
        func_flag=0
        unset str
        nsec=$((nsec+1))

        declare TEMP
        TEMP=$(mktemp --tmpdir aliases.XXX)
        aliases+=("$TEMP")                                      # tempfile for each section, add to array
        section=$(echo "$line" | awk -F '[][]' '{print $2}')    # extract section name
        title+=("${section}")
        [[ ${section} == "FUNCTIONS" ]] && func_flag=1          # section header like '####[FUNCTIONS]####'
    else    # lines between section headers
        if (( func_flag == 0 ));then                            # section header like '####[SECTION]####'
            line=$(echo "${line}" | sed -n -e '/^alias/p')      # get only lines beginning with 'alias'
            OIFS=$IFS                               # save Internal Field Separator
            if [[ -n $line ]];then                  # line not empty
                unset arr_line
                str="${line#* }"                    # remove 'alias'
                IFS='='                             # set field separator
                read -ra arr_line <<< "${str}"      # split line on '='
                
                if (( ${#arr_line[@]} > 1 ));then # check we haven't split the alias command, if it contains a '='
#                    cmd_num=$((${#arr_line[@]}-1))
                    unset cmd
                    for ((i=1; i<${#arr_line[@]}; i++));do
                        cmd="$cmd=${arr_line[i]}"       # concatenate split strings, add missing '='
                        cmd="${cmd#?}"                  # remove leading '=', which we just managed to insert!
                        if [[ ${cmd} != "'"* ]];then
                            cmd="'${cmd}"               # add leading single quote back if missing
                        fi
                    done
                else
                    cmd="${arr_line[1]}"
                fi

                al="${arr_line[0]}"
                printf "%-10s %s\n" "${al}" "${cmd}" >> "$TEMP"
            fi
            IFS=$OIFS                                   # reset Internal Field Separator
        else
            if [[ $line == *'(){'* ]];then              # likely to be 'func(){' line
                unset arr_funcs
                OIFS=$IFS                               # save Internal Field Separator
                IFS='{'                                 # set field separator
                read -ra arr_funcs <<< "${line}"        # split line on '{'
                comments="${arr_funcs[1]}"              # any remaining string is comments
                comments="${comments/'#'/}"             # remove hash char
                comments=$(echo "${comments}" | sed -e 's/^[ \t]*//')   # remove leading whitespace
                printf "%-14s %s\n" "${arr_funcs[0]}" "${comments}" >> "$TEMP"
                IFS=$OIFS                               # reset Internal Field Separator
            fi
        fi
    fi
done < "${AL}"      # input .bash_aliases file

### Write out jgmenu ###
index=0
echo "^sep(${MENU_TITLE})"                 # "Title"

for item in ${!title[*]};do
    jgmenuSubmenu 'root' "${item}_alias" "${title[item]}"
    jgmenuSeparator "${item}_alias" "${title[item]}"
    jgmenuSubmenu "${item}_alias" "${title[item]}"

    while read -r line;do
        jgmenuItem "${item}_alias" "${line}"
    done < "${aliases[index]}"    
    rm "${aliases[index]}"                 # trash the tempfile
    index=$((index+1))
done

jgmenuEnd

exit
